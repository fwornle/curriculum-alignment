name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'
  SAM_CLI_VERSION: '1.100.0'

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      is_production: ${{ steps.env.outputs.is_production }}
      tag: ${{ steps.env.outputs.tag }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="staging"
          else
            ENV="development"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "is_production=$([[ $ENV == 'production' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          
          echo "🚀 Deploying to: $ENV"

  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: determine-environment
    if: github.event.inputs.skip_tests != 'true' && github.event.inputs.rollback != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci --ignore-scripts

      - name: Run unit tests
        run: |
          npm test -- --coverage --testPathPattern=src/.*\.test\.(js|ts)$
        env:
          NODE_ENV: test

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment-tests]
    if: always() && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    outputs:
      build_artifacts: ${{ steps.build.outputs.artifacts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          version: ${{ env.SAM_CLI_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
          echo "Frontend build completed"

      - name: Build Lambda functions
        run: |
          npm run build
          echo "Lambda functions built"

      - name: SAM build
        run: |
          sam build --use-container
          echo "SAM build completed"

      - name: Package application
        id: build
        run: |
          # Create deployment package
          PACKAGE_NAME="curriculum-alignment-${{ needs.determine-environment.outputs.tag }}.zip"
          
          # Package SAM application
          sam package \
            --template-file .aws-sam/build/template.yaml \
            --s3-bucket curriculum-alignment-deployments-${{ needs.determine-environment.outputs.environment }} \
            --s3-prefix ${{ needs.determine-environment.outputs.tag }} \
            --output-template-file packaged-template.yaml
          
          # Package frontend
          cd frontend/dist
          zip -r ../../frontend-${{ needs.determine-environment.outputs.tag }}.zip .
          cd ../..
          
          echo "artifacts=packaged-template.yaml,frontend-${{ needs.determine-environment.outputs.tag }}.zip" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.tag }}
          path: |
            packaged-template.yaml
            frontend-*.zip
            .aws-sam/build/

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.tag }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy infrastructure
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          
          # Deploy with SAM
          sam deploy \
            --template-file packaged-template.yaml \
            --stack-name curriculum-alignment-$ENV \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --parameter-overrides \
              Environment=$ENV \
              Version=${{ needs.determine-environment.outputs.tag }} \
            --no-fail-on-empty-changeset \
            --config-file samconfig.toml \
            --config-env $ENV

      - name: Get deployment outputs
        id: outputs
        run: |
          # Get CloudFormation outputs
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name curriculum-alignment-${{ needs.determine-environment.outputs.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name curriculum-alignment-${{ needs.determine-environment.outputs.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucket`].OutputValue' \
            --output text)
            
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "frontend_bucket=$FRONTEND_BUCKET" >> $GITHUB_OUTPUT

      - name: Deploy monitoring
        run: |
          cd infrastructure
          ./deploy-monitoring.sh
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [determine-environment, build, deploy-infrastructure]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.tag }}

      - name: Extract frontend build
        run: |
          unzip frontend-${{ needs.determine-environment.outputs.tag }}.zip -d frontend-dist/

      - name: Deploy to S3
        run: |
          aws s3 sync frontend-dist/ s3://${{ needs.deploy-infrastructure.outputs.frontend_bucket }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"
          
          # Deploy index.html and manifest files with no-cache
          aws s3 cp frontend-dist/index.html s3://${{ needs.deploy-infrastructure.outputs.frontend_bucket }}/index.html \
            --cache-control "no-cache"
          
          # Deploy manifest files
          find frontend-dist/ -name "*.json" -exec aws s3 cp {} s3://${{ needs.deploy-infrastructure.outputs.frontend_bucket }}/{} --cache-control "no-cache" \;

      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name curriculum-alignment-${{ needs.determine-environment.outputs.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          
          if [[ -n "$DISTRIBUTION_ID" ]]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi

  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: github.event.inputs.rollback != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get database connection info from SSM
          DB_HOST=$(aws ssm get-parameter \
            --name "/curriculum-alignment/${{ needs.determine-environment.outputs.environment }}/db/host" \
            --query "Parameter.Value" --output text)
          
          DB_NAME=$(aws ssm get-parameter \
            --name "/curriculum-alignment/${{ needs.determine-environment.outputs.environment }}/db/name" \
            --query "Parameter.Value" --output text)
          
          DB_USER=$(aws ssm get-parameter \
            --name "/curriculum-alignment/${{ needs.determine-environment.outputs.environment }}/db/username" \
            --query "Parameter.Value" --output text)
          
          DB_PASS=$(aws ssm get-parameter \
            --name "/curriculum-alignment/${{ needs.determine-environment.outputs.environment }}/db/password" \
            --with-decryption \
            --query "Parameter.Value" --output text)
          
          # Run migrations
          export PGPASSWORD="$DB_PASS"
          cd scripts/migrations
          
          echo "Running database migrations..."
          psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -f 001_initial_schema.sql || echo "Schema already exists"
          psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -f 002_indexes_and_performance.sql || echo "Performance optimizations already applied"
          
          # Only run seed data in non-production environments
          if [[ "${{ needs.determine-environment.outputs.environment }}" != "production" ]]; then
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -f 003_seed_data.sql || echo "Seed data already exists"
          fi

  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure, deploy-frontend, database-migration]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          cd tests/smoke
          npm test
        env:
          API_URL: ${{ needs.deploy-infrastructure.outputs.api_url }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

      - name: Run health checks
        run: |
          # API health check
          curl -f ${{ needs.deploy-infrastructure.outputs.api_url }}/health || exit 1
          
          # Database health check
          curl -f ${{ needs.deploy-infrastructure.outputs.api_url }}/health/database || exit 1

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: github.event.inputs.rollback == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get previous version
        id: previous
        run: |
          # Get the previous successful deployment tag
          PREVIOUS_TAG=$(aws cloudformation describe-stack-events \
            --stack-name curriculum-alignment-${{ needs.determine-environment.outputs.environment }} \
            --query 'StackEvents[?ResourceStatusReason!=null]|[?contains(ResourceStatusReason,`UPDATE_COMPLETE`)][0].ResourceStatusReason' \
            --output text | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' | head -1)
          
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Rollback infrastructure
        run: |
          # Deploy previous version
          aws cloudformation deploy \
            --template-file packaged-template-${{ steps.previous.outputs.previous_tag }}.yaml \
            --stack-name curriculum-alignment-${{ needs.determine-environment.outputs.environment }} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --parameter-overrides \
              Environment=${{ needs.determine-environment.outputs.environment }} \
              Version=${{ steps.previous.outputs.previous_tag }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure, deploy-frontend, database-migration, post-deployment-tests]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.post-deployment-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment to ${{ needs.determine-environment.outputs.environment }} successful!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.determine-environment.outputs.environment }}',
              description: 'Automated deployment via GitHub Actions'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ steps.status.outputs.status }}',
              description: '${{ steps.status.outputs.message }}',
              environment_url: '${{ needs.deploy-infrastructure.outputs.api_url }}'
            });

      - name: Tag successful production deployment
        if: needs.determine-environment.outputs.is_production == 'true' && steps.status.outputs.status == 'success'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          TAG_NAME="deploy-prod-$(date +%Y%m%d-%H%M%S)"
          git tag -a "$TAG_NAME" -m "Production deployment ${{ needs.determine-environment.outputs.tag }}"
          git push origin "$TAG_NAME"