name: Blue-Green Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        type: string
      canary_enabled:
        description: 'Enable canary deployment'
        required: false
        default: true
        type: boolean
      canary_percentage:
        description: 'Canary traffic percentage'
        required: false
        default: '10'
        type: string
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  SAM_CLI_VERSION: '1.100.0'

jobs:
  validate-inputs:
    name: Validate Deployment Inputs
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.validate.outputs.environment }}
      version: ${{ steps.validate.outputs.version }}
      canary_enabled: ${{ steps.validate.outputs.canary_enabled }}
      canary_percentage: ${{ steps.validate.outputs.canary_percentage }}
    steps:
      - name: Validate inputs
        id: validate
        run: |
          ENV="${{ github.event.inputs.environment }}"
          VERSION="${{ github.event.inputs.version }}"
          CANARY="${{ github.event.inputs.canary_enabled }}"
          PERCENTAGE="${{ github.event.inputs.canary_percentage }}"
          
          # Validate environment
          if [[ ! "$ENV" =~ ^(staging|production)$ ]]; then
            echo "❌ Invalid environment: $ENV"
            exit 1
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (expected: vX.Y.Z)"
            exit 1
          fi
          
          # Validate canary percentage
          if [[ "$CANARY" == "true" ]] && [[ ! "$PERCENTAGE" =~ ^[0-9]+$ ]] || [[ "$PERCENTAGE" -lt 1 || "$PERCENTAGE" -gt 50 ]]; then
            echo "❌ Invalid canary percentage: $PERCENTAGE (must be 1-50)"
            exit 1
          fi
          
          echo "✅ Input validation passed"
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "canary_enabled=$CANARY" >> $GITHUB_OUTPUT
          echo "canary_percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          
          echo "🚀 Blue-Green Deployment Configuration:"
          echo "  Environment: $ENV"
          echo "  Version: $VERSION"
          echo "  Canary: $CANARY ($PERCENTAGE%)"

  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          NODE_ENV: test

      - name: Run security tests
        run: |
          cd tests/security
          ./run-security-tests.sh all --environment test
        env:
          NODE_ENV: test
          DISABLE_REAL_AUTH: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pre-deployment-test-results
          path: |
            coverage/
            tests/security/results/

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [validate-inputs, pre-deployment-tests]
    if: always() && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          version: ${{ env.SAM_CLI_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Build application
        run: |
          npm run build
          cd frontend && npm run build
          cd ..

      - name: SAM build and package
        run: |
          sam build --use-container
          sam package \
            --template-file .aws-sam/build/template.yaml \
            --s3-bucket curriculum-alignment-deployments-${{ needs.validate-inputs.outputs.environment }} \
            --s3-prefix ${{ needs.validate-inputs.outputs.version }} \
            --output-template-file packaged-template.yaml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ needs.validate-inputs.outputs.version }}
          path: |
            packaged-template.yaml
            .aws-sam/build/
            frontend/dist/

  blue-green-deploy:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-and-package]
    environment: ${{ needs.validate-inputs.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          version: ${{ env.SAM_CLI_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ needs.validate-inputs.outputs.version }}

      - name: Install deployment dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Execute blue-green deployment
        run: |
          # Set environment variables for deployment
          export CANARY_PERCENTAGE="${{ needs.validate-inputs.outputs.canary_percentage }}"
          export CANARY_DURATION=300
          export HEALTH_CHECK_RETRIES=5
          export HEALTH_CHECK_INTERVAL=30
          
          # Make script executable
          chmod +x scripts/blue-green-deploy.sh
          
          # Execute deployment
          ./scripts/blue-green-deploy.sh \
            ${{ needs.validate-inputs.outputs.environment }} \
            deploy \
            ${{ needs.validate-inputs.outputs.version }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Get deployment status
        id: status
        run: |
          ./scripts/blue-green-deploy.sh \
            ${{ needs.validate-inputs.outputs.environment }} \
            status > deployment-status.txt
          
          echo "status_output<<EOF" >> $GITHUB_OUTPUT
          cat deployment-status.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload deployment logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: blue-green-deployment-logs
          path: |
            deployment-status.txt
            *.log

  post-deployment-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [validate-inputs, blue-green-deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API URL
        id: api
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name curriculum-alignment-${{ needs.validate-inputs.outputs.environment }}-alias \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerUrl`].OutputValue' \
            --output text)
          
          if [[ -z "$API_URL" ]]; then
            # Fallback to direct stack output
            ACTIVE_ENV=$(aws cloudformation describe-stacks \
              --stack-name curriculum-alignment-${{ needs.validate-inputs.outputs.environment }}-alias \
              --query 'Stacks[0].Parameters[?ParameterKey==`ActiveEnvironment`].ParameterValue' \
              --output text)
            
            API_URL=$(aws cloudformation describe-stacks \
              --stack-name curriculum-alignment-${{ needs.validate-inputs.outputs.environment }}-$ACTIVE_ENV \
              --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
              --output text)
          fi
          
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "🔗 API URL: $API_URL"

      - name: Run comprehensive health checks
        run: |
          API_URL="${{ steps.api.outputs.api_url }}"
          
          echo "🏥 Running health checks against: $API_URL"
          
          # Basic health check
          if curl -sf --max-time 30 "$API_URL/health"; then
            echo "✅ Basic health check passed"
          else
            echo "❌ Basic health check failed"
            exit 1
          fi
          
          # Database health check
          if curl -sf --max-time 30 "$API_URL/health/database"; then
            echo "✅ Database health check passed"
          else
            echo "❌ Database health check failed"
            exit 1
          fi
          
          # System info check
          if curl -sf --max-time 30 "$API_URL/health/info"; then
            echo "✅ System info check passed"
          else
            echo "❌ System info check failed"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          cd tests/smoke
          npm install
          API_URL="${{ steps.api.outputs.api_url }}" \
          ENVIRONMENT="${{ needs.validate-inputs.outputs.environment }}" \
          npm test
        env:
          NODE_ENV: production

      - name: Performance validation
        run: |
          API_URL="${{ steps.api.outputs.api_url }}"
          
          echo "🚀 Running performance validation"
          
          # Test response time
          for i in {1..5}; do
            start_time=$(date +%s%N)
            if curl -sf "$API_URL/health" > /dev/null; then
              end_time=$(date +%s%N)
              response_time=$(( (end_time - start_time) / 1000000 ))
              echo "Response time $i: ${response_time}ms"
              
              if [[ $response_time -gt 5000 ]]; then
                echo "❌ Response time too high: ${response_time}ms"
                exit 1
              fi
            else
              echo "❌ Request failed on attempt $i"
              exit 1
            fi
          done
          
          echo "✅ Performance validation passed"

  cleanup-inactive:
    name: Cleanup Inactive Environment
    runs-on: ubuntu-latest
    needs: [validate-inputs, post-deployment-validation]
    if: needs.validate-inputs.outputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait before cleanup
        run: |
          echo "⏰ Waiting 5 minutes before cleanup to allow for monitoring..."
          sleep 300

      - name: Cleanup inactive environment
        run: |
          chmod +x scripts/blue-green-deploy.sh
          ./scripts/blue-green-deploy.sh \
            ${{ needs.validate-inputs.outputs.environment }} \
            cleanup \
            inactive

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [validate-inputs, post-deployment-validation]
    if: success()
    steps:
      - name: Create deployment record
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.validate-inputs.outputs.environment }}',
              description: 'Blue-Green deployment via GitHub Actions',
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: '🎉 Blue-Green deployment successful!',
              environment: '${{ needs.validate-inputs.outputs.environment }}'
            });

      - name: Success summary
        run: |
          echo "🎉 Blue-Green Deployment Successfully Completed!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "  Environment: ${{ needs.validate-inputs.outputs.environment }}"
          echo "  Version: ${{ needs.validate-inputs.outputs.version }}"
          echo "  Canary: ${{ needs.validate-inputs.outputs.canary_enabled }} (${{ needs.validate-inputs.outputs.canary_percentage }}%)"
          echo "  Timestamp: $(date -u)"
          echo ""
          echo "✅ All validation checks passed"
          echo "✅ Zero-downtime deployment achieved"
          echo "✅ Rollback capability maintained"

  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [validate-inputs, blue-green-deploy, post-deployment-validation]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Attempt automatic rollback
        run: |
          chmod +x scripts/blue-green-deploy.sh
          echo "🚨 Deployment failed, attempting automatic rollback..."
          
          if ./scripts/blue-green-deploy.sh \
            ${{ needs.validate-inputs.outputs.environment }} \
            rollback; then
            echo "✅ Automatic rollback successful"
          else
            echo "❌ Automatic rollback failed - manual intervention required"
          fi

      - name: Create failure deployment record
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.validate-inputs.outputs.environment }}',
              description: 'Failed Blue-Green deployment',
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'failure',
              description: '❌ Blue-Green deployment failed with automatic rollback',
              environment: '${{ needs.validate-inputs.outputs.environment }}'
            });

      - name: Failure summary
        run: |
          echo "❌ Blue-Green Deployment Failed"
          echo ""
          echo "📋 Failure Details:"
          echo "  Environment: ${{ needs.validate-inputs.outputs.environment }}"
          echo "  Version: ${{ needs.validate-inputs.outputs.version }}"
          echo "  Timestamp: $(date -u)"
          echo ""
          echo "🔄 Automatic rollback attempted"
          echo "🚨 Check logs for detailed error information"
          echo "👥 Manual intervention may be required"