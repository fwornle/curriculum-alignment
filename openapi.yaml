openapi: 3.0.3
info:
  title: Curriculum Alignment System API
  description: |
    Multi-Agent Curriculum Alignment System (MACAS) REST API for Central European University (CEU).
    
    This API provides endpoints for:
    - User authentication and authorization
    - Curriculum program management
    - Document processing and analysis
    - Multi-agent workflow orchestration
    - Report generation and export
    - Real-time chat interface
    
    ## Authentication
    
    The API uses AWS Cognito User Pools for authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <jwt-token>
    ```
    
    ## Rate Limiting
    
    API requests are rate limited per user:
    - Development: 100 requests/minute
    - Production: 1000 requests/minute
    
    ## Error Handling
    
    The API uses standard HTTP status codes and returns error details in JSON format:
    ```json
    {
      "error": "BadRequest",
      "message": "Invalid request parameters",
      "details": {
        "field": "programId",
        "issue": "required field missing"
      }
    }
    ```
  version: 1.0.0
  contact:
    name: CEU IT Services
    email: curriculum-alignment@ceu.edu
    url: https://www.ceu.edu
  license:
    name: Proprietary
    url: https://www.ceu.edu/legal

servers:
  - url: https://api-dev.curriculum-alignment.ceu.edu/api/v1
    description: Development server
  - url: https://api-staging.curriculum-alignment.ceu.edu/api/v1
    description: Staging server
  - url: https://api.curriculum-alignment.ceu.edu/api/v1
    description: Production server

tags:
  - name: Health
    description: Health check and system status
  - name: Authentication
    description: User authentication and token management
  - name: Programs
    description: Academic program management
  - name: Documents
    description: Document upload and processing
  - name: Analysis
    description: Curriculum analysis and workflows
  - name: Chat
    description: Real-time chat interface
  - name: Reports
    description: Report generation and export

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns the health status of the API and its dependencies
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: healthy
                timestamp: '2024-01-15T10:30:00Z'
                api: curriculum-alignment
                version: '1.0.0'
                environment: dev
                dependencies:
                  database: healthy
                  cognito: healthy
                  s3: healthy
                  qdrant: healthy

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh authentication tokens
      description: Refresh expired access tokens using a valid refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /programs:
    get:
      tags:
        - Programs
      summary: List academic programs
      description: Retrieve a list of academic programs with optional filtering
      operationId: getPrograms
      security:
        - CognitoAuth: [read]
      parameters:
        - name: department
          in: query
          description: Filter by department
          schema:
            $ref: '#/components/schemas/Department'
        - name: level
          in: query
          description: Filter by academic level
          schema:
            $ref: '#/components/schemas/AcademicLevel'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of programs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Programs
      summary: Create academic program
      description: Create a new academic program
      operationId: createProgram
      security:
        - CognitoAuth: [write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramCreateRequest'
      responses:
        '201':
          description: Program created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /programs/{programId}:
    get:
      tags:
        - Programs
      summary: Get program by ID
      description: Retrieve a specific academic program by its ID
      operationId: getProgramById
      security:
        - CognitoAuth: [read]
      parameters:
        - name: programId
          in: path
          required: true
          description: Program identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_]+$'
      responses:
        '200':
          description: Program retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Programs
      summary: Update program
      description: Update an existing academic program
      operationId: updateProgram
      security:
        - CognitoAuth: [write]
      parameters:
        - name: programId
          in: path
          required: true
          description: Program identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramUpdateRequest'
      responses:
        '200':
          description: Program updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /documents/upload:
    post:
      tags:
        - Documents
      summary: Upload curriculum document
      description: Upload a curriculum document for processing (Excel, Word, PDF)
      operationId: uploadDocument
      security:
        - CognitoAuth: [write]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{documentId}:
    get:
      tags:
        - Documents
      summary: Get document metadata
      description: Retrieve metadata and processing status for a document
      operationId: getDocument
      security:
        - CognitoAuth: [read]
      parameters:
        - name: documentId
          in: path
          required: true
          description: Document identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_]+$'
      responses:
        '200':
          description: Document metadata retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /analysis/start:
    post:
      tags:
        - Analysis
      summary: Start curriculum analysis
      description: Initiate a new curriculum analysis workflow
      operationId: startAnalysis
      security:
        - CognitoAuth: [write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisStartRequest'
      responses:
        '202':
          description: Analysis started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStartResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /analysis/{analysisId}/status:
    get:
      tags:
        - Analysis
      summary: Get analysis status
      description: Retrieve the current status and progress of an analysis
      operationId: getAnalysisStatus
      security:
        - CognitoAuth: [read]
      parameters:
        - name: analysisId
          in: path
          required: true
          description: Analysis identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_]+$'
      responses:
        '200':
          description: Analysis status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStatus'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /analysis/{analysisId}/results:
    get:
      tags:
        - Analysis
      summary: Get analysis results
      description: Retrieve the results of a completed analysis
      operationId: getAnalysisResults
      security:
        - CognitoAuth: [read]
      parameters:
        - name: analysisId
          in: path
          required: true
          description: Analysis identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_]+$'
      responses:
        '200':
          description: Analysis results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResults'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Analysis not completed yet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/message:
    post:
      tags:
        - Chat
      summary: Send chat message
      description: Send a message to the chat interface agent
      operationId: sendChatMessage
      security:
        - CognitoAuth: [write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      responses:
        '200':
          description: Message sent and response received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /reports/generate:
    post:
      tags:
        - Reports
      summary: Generate report
      description: Generate and download a curriculum analysis report
      operationId: generateReport
      security:
        - CognitoAuth: [write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateRequest'
      responses:
        '202':
          description: Report generation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportGenerateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /reports/{reportId}/download:
    get:
      tags:
        - Reports
      summary: Download report
      description: Download a generated report file
      operationId: downloadReport
      security:
        - CognitoAuth: [read]
      parameters:
        - name: reportId
          in: path
          required: true
          description: Report identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_]+$'
      responses:
        '200':
          description: Report downloaded successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    CognitoAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: AWS Cognito JWT token

  schemas:
    # Health and System Status
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - api
        - version
        - environment
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        timestamp:
          type: string
          format: date-time
        api:
          type: string
        version:
          type: string
        environment:
          type: string
        dependencies:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, unhealthy]

    # Authentication
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Valid refresh token

    TokenResponse:
      type: object
      required:
        - accessToken
        - idToken
        - expiresIn
      properties:
        accessToken:
          type: string
        idToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string
          default: Bearer

    # Common Enums
    Department:
      type: string
      enum:
        - Computer Science
        - Mathematics
        - Economics
        - Political Science
        - History
        - Philosophy
        - Business
        - Law
        - Public Policy
        - Environmental Science

    AcademicLevel:
      type: string
      enum:
        - undergraduate
        - graduate
        - phd

    AnalysisType:
      type: string
      enum:
        - curriculum-gap
        - peer-comparison
        - accreditation-compliance

    # Programs
    Program:
      type: object
      required:
        - id
        - name
        - department
        - level
        - credits
        - duration
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        department:
          $ref: '#/components/schemas/Department'
        level:
          $ref: '#/components/schemas/AcademicLevel'
        credits:
          type: integer
          minimum: 1
          maximum: 300
        duration:
          type: string
          enum: [1-year, 2-year, 3-year, 4-year]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
        documentIds:
          type: array
          items:
            type: string

    ProgramCreateRequest:
      type: object
      required:
        - name
        - department
        - level
        - credits
        - duration
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        department:
          $ref: '#/components/schemas/Department'
        level:
          $ref: '#/components/schemas/AcademicLevel'
        credits:
          type: integer
          minimum: 1
          maximum: 300
        duration:
          type: string
          enum: [1-year, 2-year, 3-year, 4-year]

    ProgramUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        department:
          $ref: '#/components/schemas/Department'
        level:
          $ref: '#/components/schemas/AcademicLevel'
        credits:
          type: integer
          minimum: 1
          maximum: 300
        duration:
          type: string
          enum: [1-year, 2-year, 3-year, 4-year]

    ProgramListResponse:
      type: object
      required:
        - programs
        - pagination
      properties:
        programs:
          type: array
          items:
            $ref: '#/components/schemas/Program'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Documents
    DocumentUploadRequest:
      type: object
      required:
        - file
        - programId
      properties:
        file:
          type: string
          format: binary
          description: Document file (Excel, Word, or PDF)
        programId:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        description:
          type: string
          maxLength: 500
        documentType:
          type: string
          enum: [curriculum, syllabus, assessment, accreditation]

    DocumentUploadResponse:
      type: object
      required:
        - documentId
        - status
        - uploadUrl
      properties:
        documentId:
          type: string
        status:
          type: string
          enum: [uploaded, processing, completed, failed]
        uploadUrl:
          type: string
          format: uri
        processingEstimate:
          type: integer
          description: Estimated processing time in seconds

    Document:
      type: object
      required:
        - id
        - filename
        - programId
        - status
        - uploadedAt
      properties:
        id:
          type: string
        filename:
          type: string
        programId:
          type: string
        documentType:
          type: string
          enum: [curriculum, syllabus, assessment, accreditation]
        status:
          type: string
          enum: [uploaded, processing, completed, failed]
        uploadedAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time
        uploadedBy:
          type: string
        fileSize:
          type: integer
        contentHash:
          type: string
        extractedText:
          type: string
        processingErrors:
          type: array
          items:
            type: string

    # Analysis
    AnalysisStartRequest:
      type: object
      required:
        - programId
        - documentIds
        - analysisType
      properties:
        programId:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        documentIds:
          type: array
          items:
            type: string
          minItems: 1
        analysisType:
          $ref: '#/components/schemas/AnalysisType'
        llmModelConfig:
          $ref: '#/components/schemas/LLMModelConfig'
        parameters:
          type: object
          additionalProperties: true

    AnalysisStartResponse:
      type: object
      required:
        - analysisId
        - status
        - estimatedDuration
      properties:
        analysisId:
          type: string
        status:
          type: string
          enum: [queued, running]
        estimatedDuration:
          type: integer
          description: Estimated completion time in seconds
        workflowId:
          type: string

    AnalysisStatus:
      type: object
      required:
        - id
        - status
        - progress
        - createdAt
      properties:
        id:
          type: string
        status:
          type: string
          enum: [queued, running, completed, failed, cancelled]
        progress:
          type: number
          minimum: 0
          maximum: 100
        createdAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        currentStep:
          type: string
        totalSteps:
          type: integer
        agentStatuses:
          type: array
          items:
            $ref: '#/components/schemas/AgentStatus'
        errors:
          type: array
          items:
            type: string

    AnalysisResults:
      type: object
      required:
        - analysisId
        - programId
        - analysisType
        - completedAt
        - results
      properties:
        analysisId:
          type: string
        programId:
          type: string
        analysisType:
          $ref: '#/components/schemas/AnalysisType'
        completedAt:
          type: string
          format: date-time
        results:
          type: object
          additionalProperties: true
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/Recommendation'
        gaps:
          type: array
          items:
            $ref: '#/components/schemas/CurriculumGap'
        peerComparisons:
          type: array
          items:
            $ref: '#/components/schemas/PeerComparison'

    # Chat
    ChatMessageRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 2000
        context:
          type: object
          properties:
            programId:
              type: string
            analysisId:
              type: string
            conversationId:
              type: string

    ChatMessageResponse:
      type: object
      required:
        - response
        - timestamp
      properties:
        response:
          type: string
        timestamp:
          type: string
          format: date-time
        conversationId:
          type: string
        suggestions:
          type: array
          items:
            type: string

    # Reports
    ReportGenerateRequest:
      type: object
      required:
        - programId
        - reportType
        - format
      properties:
        programId:
          type: string
        analysisId:
          type: string
        reportType:
          type: string
          enum: [gap-analysis, peer-comparison, compliance-report, executive-summary]
        format:
          type: string
          enum: [pdf, excel, word]
        includeCharts:
          type: boolean
          default: true
        includeRecommendations:
          type: boolean
          default: true
        customSections:
          type: array
          items:
            type: string

    ReportGenerateResponse:
      type: object
      required:
        - reportId
        - status
        - estimatedCompletion
      properties:
        reportId:
          type: string
        status:
          type: string
          enum: [queued, generating, completed, failed]
        estimatedCompletion:
          type: string
          format: date-time
        downloadUrl:
          type: string
          format: uri

    # Supporting Types
    LLMModelConfig:
      type: object
      properties:
        provider:
          type: string
          enum: [anthropic, openai, grok]
        model:
          type: string
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 0.7
        maxTokens:
          type: integer
          minimum: 1
          maximum: 8192

    AgentStatus:
      type: object
      required:
        - agentName
        - status
      properties:
        agentName:
          type: string
        status:
          type: string
          enum: [idle, running, completed, failed]
        progress:
          type: number
          minimum: 0
          maximum: 100
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        error:
          type: string

    Recommendation:
      type: object
      required:
        - title
        - description
        - priority
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [high, medium, low]
        category:
          type: string
        implementationEffort:
          type: string
          enum: [low, medium, high]
        expectedImpact:
          type: string
          enum: [low, medium, high]

    CurriculumGap:
      type: object
      required:
        - area
        - description
        - severity
      properties:
        area:
          type: string
        description:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        suggestedCourses:
          type: array
          items:
            type: string
        peerExamples:
          type: array
          items:
            type: string

    PeerComparison:
      type: object
      required:
        - university
        - program
        - similarity
      properties:
        university:
          type: string
        program:
          type: string
        similarity:
          type: number
          minimum: 0
          maximum: 1
        strengths:
          type: array
          items:
            type: string
        differences:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - pages
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        pages:
          type: integer
          minimum: 0
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    # Error Responses
    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        requestId:
          type: string

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: BadRequest
            message: Invalid request parameters
            details:
              field: programId
              issue: required field missing
            timestamp: '2024-01-15T10:30:00Z'
            path: '/api/v1/programs'

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Unauthorized
            message: Invalid or missing authentication token
            timestamp: '2024-01-15T10:30:00Z'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Forbidden
            message: Insufficient permissions for this operation
            timestamp: '2024-01-15T10:30:00Z'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: NotFound
            message: The requested resource was not found
            timestamp: '2024-01-15T10:30:00Z'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: InternalServerError
            message: An unexpected error occurred
            timestamp: '2024-01-15T10:30:00Z'